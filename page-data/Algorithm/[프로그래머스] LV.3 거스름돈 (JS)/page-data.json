{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/[프로그래머스] LV.3 거스름돈 (JS)/","result":{"data":{"site":{"siteMetadata":{"title":"Easyone의 기술블로그","author":"thinkanddoit","siteUrl":"https://thinkanddoit.github.io","comment":{"disqusShortName":"","utterances":"thinkanddoit/thinkanddoit.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"ed7707e4-5c34-504e-a373-b312dd48508f","excerpt":"문제출처 정답 코드 해결방법 참고 블로그 글 LV.3 중에서도 난이도가 꽤 높은 문제였다. 여러가지 블로그 풀이를 참고했지만 위 링크글이 가장 깔끔하게 설명해주어서 첨부했다. 해당 문제는 DP문제이다. 해결 방법을 떠올리는 것은 어렵지만 실제 코드는 생각보다 간단하다. dp배열은 크기로 생성해준다. money가 가지고 있는 화폐 크기별로 전체 순환을 한다. dpi += dpi - el 위 점화식이 나오게된 배경을 이해하는데에 어려움이 있었다. 간단하게 설명하자면, 알고리즘은…","html":"<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/12907\">문제출처</a></p>\n<h2 id=\"정답-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%8B%B5-%EC%BD%94%EB%93%9C\" aria-label=\"정답 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정답 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> money</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">DIVISOR</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000000007</span>\n\n  <span class=\"token keyword\">const</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  money<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> el<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> el<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token constant\">DIVISOR</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"해결방법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95\" aria-label=\"해결방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방법</h2>\n<p><a href=\"https://taesung1993.tistory.com/74\">참고 블로그 글</a></p>\n<p>LV.3 중에서도 난이도가 꽤 높은 문제였다.<br>\n여러가지 블로그 풀이를 참고했지만 위 링크글이 가장 깔끔하게 설명해주어서 첨부했다.</p>\n<p>해당 문제는 <strong>DP문제</strong>이다.<br>\n해결 방법을 떠올리는 것은 어렵지만 실제 코드는 생각보다 간단하다.</p>\n<p>dp배열은 <code class=\"language-text\">n + 1</code>크기로 생성해준다.<br>\nmoney가 가지고 있는 화폐 크기별로 전체 순환을 한다.</p>\n<blockquote>\n<p>dp[i] += dp[i - el]</p>\n</blockquote>\n<p>위 점화식이 나오게된 배경을 이해하는데에 어려움이 있었다.</p>\n<p>간단하게 설명하자면, 알고리즘은 2중 순환구조를 가지게되는데, 2번째 순환은 최소 한개의 <code class=\"language-text\">el</code>을 가지는 순번 이후부터 탐색을 한다.(i가 el부터 시작하는 이유)</p>\n<p>사실 문제에 대해서 이해를 하기 위해서는 시각자료가 꼭 필요할 것 같다.<br>\n그래서 위 링크의 블로그를 참고하는게 이해를 위한 가장 쉬운 방법이다.</p>\n<p>DP를 가지고도 이렇게 복잡한 구조의 생각을 필요로하는 문제가 있다는 것을 알았고\n사고의 확장을 경험한 문제였다.</p>\n<h3 id=\"프로그래머스\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4\" aria-label=\"프로그래머스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그래머스</h3>\n<table>\n<thead>\n<tr>\n<th>순위</th>\n<th>점수</th>\n<th>해결한 문제</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>528위</td>\n<td>1,626점</td>\n<td>243개</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"[프로그래머스] LV.3 거스름돈 (JS)","date":"December 21, 2022"}}},"pageContext":{"slug":"/Algorithm/[프로그래머스] LV.3 거스름돈 (JS)/","previous":{"fields":{"slug":"/Algorithm/[프로그래머스] LV.3 풍선 터트리기 (JS)/"},"frontmatter":{"title":"[프로그래머스] LV.3 풍선 터트리기 (JS)"}},"next":{"fields":{"slug":"/data structure study/알고리즘을 공부해야하는 이유/"},"frontmatter":{"title":"프론트엔드 개발자가 자료구조를 공부해야하는 이유"}}}}}